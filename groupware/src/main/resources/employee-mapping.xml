<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="employee">

	<resultMap id="employeeMap" type="employee">
		<id column="employee_no" property="employee_no"/>
		<result column="employee_name" property="employee_name"/>
		<result column="password" property="password"/>
		<result column="hiredate" property="hiredate"/>
		<result column="usertype" property="usertype"/>
		<result column="email" property="email"/>
		<result column="phonenumber" property="phonenumber"/>
		<result column="position" property="position"/>
		<association property="department" javaType="department">
			<id column="department_no" property="department_no" />
			<result column="department_name" property="department_name"/>
		</association>
	</resultMap>
	
	<select id="loadAllEmployee" resultMap="employeeMap">
		SELECT employee_no,password,hiredate,usertype,email,phonenumber,department_name, d.department_no as department_no, position, employee_name
		from employee e
		left join department d
		on e.department_no = d.department_no
		ORDER BY employee_no desc
	</select>
	
	
	<!-- <select id="login" resultMap="employeeMap">
		select * from employee where employee_no = #{employee_no} and password = #{password}
	</select> -->
	
	
	<select id="login" resultMap="employeeMap">
		select e.*, department_name 
		from employee e
		left join department d
		on e.department_no = d.department_no
		where employee_no = #{employee_no} and password = #{password}
	</select>
	
	
	<update id="updateLastLogin" parameterType="employee">
		update employee set last_login = sysdate where employee_no = #{employee_no}
	</update>
	
	<update id="updateEmployee" parameterType="employee">
		update employee
		set employee_name = #{employee_name},
			password = #{password},
			<if test="hiredate!=null">
				hiredate = #{hiredate},
			</if>
			department_no = #{department.department_no},
			email = #{email},
			position = #{position},
			phonenumber = #{phonenumber}
		where employee_no = #{employee_no}
	</update>
	
	<insert id="insertEmployee" parameterType="employee">
		INSERT INTO
		employee(employee_no,employee_name,password,hiredate,usertype,department_no,email,position,phonenumber)
		<if test="hiredate!=null">
			values(employee_seq.nextval,#{employee_name},#{password},#{hiredate},'0',#{department.department_no},#{email},#{position},#{phonenumber})
		</if>
		<if test="hiredate==null">
			values(employee_seq.nextval,#{employee_name},#{password},sysdate,'0',#{department.department_no},#{email},#{position},#{phonenumber})
		</if>
	</insert>
	
	
	<!-- 리스트 조회 -->		
	<select id="loadAllEmpList" resultMap="employeeMap" parameterType="hashmap" >
		<include refid="pagingHeader"></include>
		select
		<if test="selectOption != null">
			 ${selectOption}
		</if>
		<if test="selectOption == null">
		 B.*
		</if>
		from (${fromOption}) 
		<where>
			${whereOption}
			<if test="searchOption != null">
				<include refid="search"/>
			</if>
			<if test="order != null">
				order by ${order} desc
			</if>
		</where>
		<include refid="pagingFooter"></include>
	</select>
	
	<!-- 게시글 레코드 갯수 -->
	<select id="countArticle" resultType="int" parameterType="hashmap">
		select count(*) 
		from ${fromOption}
		<where>
			${whereOption}
			<if test="searchOption != null">
				<include refid="search"/>
			</if>
			</where>
	</select>	

	<!-- 검색sql -->
	<sql id="search">
		<foreach collection="searchOption" item="searchOption" open="AND (" close=" )" separator=" OR ">${searchOption} LIKE '%'||#{keyword}||'%'</foreach>
	</sql>

	<!-- 페이징sql -->
	<sql id="pagingHeader">
		select * from (select rownum as rn, A.* from(
	</sql>	
	<sql id="pagingFooter">
		)A
		)where rn between #{start} and #{end}
	</sql>
	
	<select id="selectEmployeeHiredate" resultType="employee">
		select hiredate from employee where employee_no = #{employee_no}
	</select>
	
	
	<select id="selectEmpListWithCri" parameterType="map" resultMap="employeeMap">
		select * from(
			select * from(
				select rownum rnum, employee_no, regexp_replace(password,'.','*') password, hiredate, usertype, email, phonenumber, d.department_name as department_name, d.department_no as department_no, position, employee_name
				from employee e left join department d on e.department_no = d.department_no
				<include refid="criteria"></include>
				order by employee_no desc
			) <![CDATA[ where rnum <= (#{cri.pageEnd})
		)where rnum >= #{cri.pageStart}]]>
		</select>
		
	<select id="selectEmpCntWithCri" parameterType="map" resultType="int">
		select count(e.employee_no) from employee e
		<include refid="criteria"></include>
	</select>	
	

	<!-- 검색조건에 해당하는 where을 동적으로 불러오기 위하여 만든 mybatis sql문  -->
	<sql id="criteria">
		<where>
			<if test="cri.keyword != null and cri.keyword !=''">
				${cri.searchType} like '%' || #{cri.keyword} || '%'
			</if>
			<choose>
				<when test="department_no == 2">
					and e.department_no is null
				</when>				
				<when test="department_no != 1 and department_no !=2">
					and e.department_no = #{department_no}
				</when>
			</choose>
		</where>
	</sql>
	
	
	
</mapper>